//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input System/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerActions"",
            ""id"": ""b8d38dc2-30d9-4725-bc57-8ac535bcf42d"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f6e6931d-a074-4f74-bd32-777e900f6437"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""840bae17-516d-496c-901d-8224012f7d2d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""a0372652-3a50-42a5-9e1a-cd4f3618a263"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""126b3ebd-5dd7-417e-a5cd-53c57224d574"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d24451b-44d7-4e5e-8e03-e81be8055bb7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1bf55271-9201-4448-bed9-e306c0bac58c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dd61f627-c74d-428e-b60f-19e800d3108e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fc4f5c72-75ad-49c5-a495-404742969136"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""88b5f809-8dc9-4518-82f9-dca107085d6b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""890e0c51-36f3-42c5-ba4f-bd0dad4a771f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d01e4e96-75ae-4d7b-b004-e0638a027786"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a9caaf63-eea9-4b6c-b18f-2176dfba5a5d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d2469301-4c14-4527-a470-242de2c820b7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""51583e85-e82a-4cb3-a1e2-9cca3762413c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6a897553-3f84-43b2-83cd-b1e7e9f478aa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""33063525-d23e-43a6-8525-8a404ae22b24"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""LookActions"",
            ""id"": ""6c89b8e1-2e80-41a8-bad3-122e0fe4ef5c"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""Value"",
                    ""id"": ""3b962ce8-1af1-44fc-b6c2-9ee07c4c588f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""Value"",
                    ""id"": ""b6edbb95-c88a-4dbe-9593-90a4e9ebfecd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c77fafc8-ca18-4c9d-a9a5-eb84c2585a5f"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34588f29-0d55-4edc-8962-4bbe456ac9c6"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpecialActions"",
            ""id"": ""ab81b79d-2b12-4d34-b468-a28eebac94bc"",
            ""actions"": [
                {
                    ""name"": ""DetectEnemy"",
                    ""type"": ""Button"",
                    ""id"": ""16fd4b1e-3f11-467a-a64b-2d677daf4494"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""37cc0303-957f-4508-8303-58c08248fa79"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""DetectEnemy"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // PlayerActions
        m_PlayerActions = asset.FindActionMap("PlayerActions", throwIfNotFound: true);
        m_PlayerActions_Jump = m_PlayerActions.FindAction("Jump", throwIfNotFound: true);
        m_PlayerActions_Movement = m_PlayerActions.FindAction("Movement", throwIfNotFound: true);
        m_PlayerActions_MoveRight = m_PlayerActions.FindAction("MoveRight", throwIfNotFound: true);
        m_PlayerActions_MoveForward = m_PlayerActions.FindAction("MoveForward", throwIfNotFound: true);
        // LookActions
        m_LookActions = asset.FindActionMap("LookActions", throwIfNotFound: true);
        m_LookActions_MouseX = m_LookActions.FindAction("MouseX", throwIfNotFound: true);
        m_LookActions_MouseY = m_LookActions.FindAction("MouseY", throwIfNotFound: true);
        // SpecialActions
        m_SpecialActions = asset.FindActionMap("SpecialActions", throwIfNotFound: true);
        m_SpecialActions_DetectEnemy = m_SpecialActions.FindAction("DetectEnemy", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerActions
    private readonly InputActionMap m_PlayerActions;
    private IPlayerActionsActions m_PlayerActionsActionsCallbackInterface;
    private readonly InputAction m_PlayerActions_Jump;
    private readonly InputAction m_PlayerActions_Movement;
    private readonly InputAction m_PlayerActions_MoveRight;
    private readonly InputAction m_PlayerActions_MoveForward;
    public struct PlayerActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_PlayerActions_Jump;
        public InputAction @Movement => m_Wrapper.m_PlayerActions_Movement;
        public InputAction @MoveRight => m_Wrapper.m_PlayerActions_MoveRight;
        public InputAction @MoveForward => m_Wrapper.m_PlayerActions_MoveForward;
        public InputActionMap Get() { return m_Wrapper.m_PlayerActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActionsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActionsActions instance)
        {
            if (m_Wrapper.m_PlayerActionsActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnJump;
                @Movement.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMovement;
                @MoveRight.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMoveRight;
                @MoveForward.started -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMoveForward;
                @MoveForward.performed -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMoveForward;
                @MoveForward.canceled -= m_Wrapper.m_PlayerActionsActionsCallbackInterface.OnMoveForward;
            }
            m_Wrapper.m_PlayerActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @MoveForward.started += instance.OnMoveForward;
                @MoveForward.performed += instance.OnMoveForward;
                @MoveForward.canceled += instance.OnMoveForward;
            }
        }
    }
    public PlayerActionsActions @PlayerActions => new PlayerActionsActions(this);

    // LookActions
    private readonly InputActionMap m_LookActions;
    private ILookActionsActions m_LookActionsActionsCallbackInterface;
    private readonly InputAction m_LookActions_MouseX;
    private readonly InputAction m_LookActions_MouseY;
    public struct LookActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public LookActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseX => m_Wrapper.m_LookActions_MouseX;
        public InputAction @MouseY => m_Wrapper.m_LookActions_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_LookActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LookActionsActions set) { return set.Get(); }
        public void SetCallbacks(ILookActionsActions instance)
        {
            if (m_Wrapper.m_LookActionsActionsCallbackInterface != null)
            {
                @MouseX.started -= m_Wrapper.m_LookActionsActionsCallbackInterface.OnMouseX;
                @MouseX.performed -= m_Wrapper.m_LookActionsActionsCallbackInterface.OnMouseX;
                @MouseX.canceled -= m_Wrapper.m_LookActionsActionsCallbackInterface.OnMouseX;
                @MouseY.started -= m_Wrapper.m_LookActionsActionsCallbackInterface.OnMouseY;
                @MouseY.performed -= m_Wrapper.m_LookActionsActionsCallbackInterface.OnMouseY;
                @MouseY.canceled -= m_Wrapper.m_LookActionsActionsCallbackInterface.OnMouseY;
            }
            m_Wrapper.m_LookActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MouseX.started += instance.OnMouseX;
                @MouseX.performed += instance.OnMouseX;
                @MouseX.canceled += instance.OnMouseX;
                @MouseY.started += instance.OnMouseY;
                @MouseY.performed += instance.OnMouseY;
                @MouseY.canceled += instance.OnMouseY;
            }
        }
    }
    public LookActionsActions @LookActions => new LookActionsActions(this);

    // SpecialActions
    private readonly InputActionMap m_SpecialActions;
    private ISpecialActionsActions m_SpecialActionsActionsCallbackInterface;
    private readonly InputAction m_SpecialActions_DetectEnemy;
    public struct SpecialActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public SpecialActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DetectEnemy => m_Wrapper.m_SpecialActions_DetectEnemy;
        public InputActionMap Get() { return m_Wrapper.m_SpecialActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpecialActionsActions set) { return set.Get(); }
        public void SetCallbacks(ISpecialActionsActions instance)
        {
            if (m_Wrapper.m_SpecialActionsActionsCallbackInterface != null)
            {
                @DetectEnemy.started -= m_Wrapper.m_SpecialActionsActionsCallbackInterface.OnDetectEnemy;
                @DetectEnemy.performed -= m_Wrapper.m_SpecialActionsActionsCallbackInterface.OnDetectEnemy;
                @DetectEnemy.canceled -= m_Wrapper.m_SpecialActionsActionsCallbackInterface.OnDetectEnemy;
            }
            m_Wrapper.m_SpecialActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DetectEnemy.started += instance.OnDetectEnemy;
                @DetectEnemy.performed += instance.OnDetectEnemy;
                @DetectEnemy.canceled += instance.OnDetectEnemy;
            }
        }
    }
    public SpecialActionsActions @SpecialActions => new SpecialActionsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActionsActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnMoveForward(InputAction.CallbackContext context);
    }
    public interface ILookActionsActions
    {
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
    public interface ISpecialActionsActions
    {
        void OnDetectEnemy(InputAction.CallbackContext context);
    }
}
